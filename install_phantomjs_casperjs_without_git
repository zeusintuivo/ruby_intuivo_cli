#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
# Inspired by:
# Script to install NVM, Node, PhantomJS and CasperJS without installing or using git.
# REF: https://gist.github.com/navio/7443018





                                        ######## ##     ## ##    ##  ######  ######## ####  #######  ##    ##  ######
                                        ##       ##     ## ###   ## ##    ##    ##     ##  ##     ## ###   ## ##    ##
                                        ##       ##     ## ####  ## ##          ##     ##  ##     ## ####  ## ##
                                        ######   ##     ## ## ## ## ##          ##     ##  ##     ## ## ## ##  ######
                                        ##       ##     ## ##  #### ##          ##     ##  ##     ## ##  ####       ##
                                        ##       ##     ## ##   ### ##    ##    ##     ##  ##     ## ##   ### ##    ##
                                        ##        #######  ##    ##  ######     ##    ####  #######  ##    ##  ######






#                                              #
#                                              #
### PROCEDURTES, DEFS, FUNCTIONS: WHATEVERS ####
#                                              #
#                                              #


load_colors_script_name_and_break_trap() {

    GRAYEDOUT="\033[01;30m"
    RED="\033[01;31m"
    GREEN="\033[01;32m"
    YELLOW="\033[01;33m"
    DARKBLUE="\033[01;34m"
    PURPLE="\033[01;35m"
    CYAN="\033[01;36m"
    WHITEBOLD="\033[01;37m"
    CERO="\033[01;0m"

    # TRAP
    trap '{  \" KEYBOARD INTERRUPT.\"; exit 130; }' INT

    THISSCRIPTNAME=`basename "$0"`
} # end load_colors_script_name_and_break_trap


load_struct_testing(){
    EXECOMCLI=$(wget --quiet --no-check-certificate https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )   # suppress only curl download messages, but keep curl output for variable
    eval """${EXECOMCLI}"""

    # verify
    ( ( ! command -v type passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 130; )
} # end function load_struct_testing


type_function_exists() {
  type "$1" > /dev/null 2>&1
} # type_function_exists


nvm_reload() {
    if [ -d $HOME/.nvm/ ]; then   #check for direc existance and attempt to load
    {
        # NVM
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    }
    fi
} # nvm_reload


install_nvm_wget() {
    ( command -v wget >/dev/null 2>&1; ) &&  wget --no-check-certificate https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh  -O - | bash
} # end install_nvm_wget


install_nvm_curl() {
    ( command -v curl >/dev/null 2>&1; ) &&  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash
} # end install_nvm_curl


install_nvm_decide_between_curl() {

    if  is_installed wget ; then
    {
        install_nvm_wget
    }
    elif is_installed curl ; then
    {
        install_nvm_curl
    }
    fi
} # end install_nvm_decide_between_curl


check_wget_or_curl_are_installed() {
    if  is_not_installed wget ; then
    {
        sudo apt-get install wget -y
    }
    elif is_not_installed curl ; then
    {
        sudo apt-get install curl -y
    }
    fi

} # end check_wget_or_curl_are_installed


nvm_install() {
    if ! type_function_exists nvm; then
    {
        nvm_reload
        if ! type_function_exists nvm; then   #test again
        {
            printf "Installing NVM %s\n" >&2
            install_nvm_decide_between_curl
            wait
            # NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
        }
        fi
        nvm ls
    }
    fi
    wait

} # end nvm_install


node_install() {
    local node_version=""
    if [ ! -z "${1}" ] ;  then
        node_version="${1}"
    fi
    if [ ! -z "${node_version}" ] ;  then
    {
        if ! type_function_exists node; then
        {
            nvm install "${node_version}";
        }
        fi
        wait
    }
    else
    {
        echo "        # Installing Node! | Will skip if already exist"
        cd $HOME;
        ( [ -f  .bash_profile ] && [[ -z $(cat .bash_profile | egrep "nvm") ||  -z $(cat .bash_profile | egrep "NVM") ]]  && source .bash_profile ) \
         ||
        ( [ -f  .bashrc ] && [[ -z $(cat .bashrc | egrep "nvm") ||  -z $(cat .bashrc | egrep "NVM") ]]  && source .bashrc ) \
         ||
        ( [ -f  .profile ] && [[ -z $(cat .profile | egrep "nvm") ||  -z $(cat .profile | egrep "NVM") ]]  && source .profile ) \
         ||
        ( [ -f  .zshrc ] && [[ -z $(cat .zshrc | egrep "nvm") ||  -z $(cat .zshrc | egrep "NVM") ]]  && source .zshrc )

        if ! type_function_exists node; then
        {
            nvm install stable;
        }
        fi
        wait

    }
    fi


    export NODE_VERSION=$(node --version);
    echo "Node -v ${NODE_VERSION} Installation Complete";

} # end node_install


phantomjs_install() {

    local phantomjs_version=""
    if [ ! -z "${1}" ] ;  then
        phantomjs_version="${1}"
    fi
    if [ ! -z "${phantomjs_version}" ] ;  then
    {
        echo "        # Installing PhantomJS version ${phantomjs_version}. "
        source $HOME/.bash_profile;
        npm -g install phantomjs@"${phantomjs_version}"
        wait
    }
    else
    {
        phantomjs_version="LASTEST"
        echo "        # Installing ${phantomjs_version} PhantomJS ! |  phantomjs-prebuilt; phantomjs2;"
        source $HOME/.bash_profile;
        npm -g install phantomjs-prebuilt;
        wait
        npm -g install phantomjs2;
        wait
    }
    fi

    echo  "PhantomJS ${phantomjs_version} version isntall complete";
} # end phantomjs_install


casper_install() {
    # Downloading CasperJS! Latest Dev Version
    CURRENT_NODE_HOME=$HOME/.nvm/versions/node/$NODE_VERSION/
    cd $CURRENT_NODE_HOME/lib/node_modules;
    wget https://github.com/n1k0/casperjs/zipball/master;
    unzip master;
    mv *casperjs* casperjs;
    cd $CURRENT_NODE_HOME/bin;
    ln -s $CURRENT_NODE_HOME/lib/node_modules/casperjs/bin/casperjs casperjs;
    source $HOME/.bash_profile;
    wait

    echo 'CasperJS Installation Complete';

} # end casper_install


verify_installations() {
    # Verify Installation - Prompt with Alert if Problems.
    commands_tocheck="nvm phantomjs casperjs"
    missing_counter=0;

    for needed_command in $commands_tocheck; do
    {
          if ! type_function_exists "$needed_command"; then
        {
            printf "Command not found in PATH: %s\n" "$needed_command" >&2
            ((missing_counter++))
        }
          fi
    }
    done

    if ((missing_counter > 0)); then
    {
      printf "There was something wrong with the installation. Please contact the Reference Store Team" >&2
      exit 1
    }
    fi

    # Alert of Installation Completition.
    echo >&2 "Dependecies Installation Complete Downloading. "

} # end verify_installations


display_help() {
    echo -e "

${GRAYEDOUT} ${THISSCRIPTNAME} Installs nvm, npm, phantomjs and caspterjs

    Usage

         ${THISSCRIPTNAME}  1.9.8     ---> will install nvm, node, and phantomjs version 1.9.8, and caspterjs

         ${THISSCRIPTNAME}            ---> will install nvm, node, and phantomjs lastest       , and caspterjs
    "
} # end display_help




                                                                               ##     ##    ###    #### ##    ##
                                                                               ###   ###   ## ##    ##  ###   ##
                                                                               #### ####  ##   ##   ##  ####  ##
                                                                               ## ### ## ##     ##  ##  ## ## ##
                                                                               ##     ## #########  ##  ##  ####
                                                                               ##     ## ##     ##  ##  ##   ###
                                                                               ##     ## ##     ## #### ##    ##




#                                              #
#                                              #
###                MAIN START               ####
#                                              #
#                                              #





phantomjs_version="1.9.8"
if [ ! -z "${1}" ] ;  then
    phantomjs_version="${1}"
fi

node_version="stable"
if [ ! -z "${2}" ] ;  then
    node_version="${2}"
fi


load_colors_script_name_and_break_trap
display_help
load_struct_testing

check_wget_or_curl_are_installed

nvm_install
node_install "${node_version}"
phantomjs_install "${phantomjs_version}"
casper_install
verify_installations
