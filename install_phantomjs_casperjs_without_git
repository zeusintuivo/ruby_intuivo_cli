#!/bin/bash
#
# @author Zeus Intuivo <zeus@intuivo.com>
#
#
# Inspired by:
# Script to install NVM, Node, PhantomJS and CasperJS without installing or using git.
# REF: https://gist.github.com/navio/7443018





######## ##     ## ##    ##  ######  ######## ####  #######  ##    ##  ######
##       ##     ## ###   ## ##    ##    ##     ##  ##     ## ###   ## ##    ##
##       ##     ## ####  ## ##          ##     ##  ##     ## ####  ## ##
######   ##     ## ## ## ## ##          ##     ##  ##     ## ## ## ##  ######
##       ##     ## ##  #### ##          ##     ##  ##     ## ##  ####       ##
##       ##     ## ##   ### ##    ##    ##     ##  ##     ## ##   ### ##    ##
##        #######  ##    ##  ######     ##    ####  #######  ##    ##  ######






#                                              #
#                                              #
### PROCEDURTES, DEFS, FUNCTIONS: WHATEVERS ####
#                                              #
#                                              #
#
#
# - - -  struct_testing no sudo - - -  START
#
#
# DEBUG=1
# REMOVECACHE=1
export THISSCRIPT
typeset -gr THISSCRIPT="$0"
(( DEBUG ))  && echo "${THISSCRIPT}"
export THISFOLDER
typeset -gr THISFOLDER="$(dirname "$0")"
(( DEBUG ))  && echo "${THISFOLDER}"

if ( ! command -v nproc >/dev/null 2>&1; ) ; then {
  export CPU_COUNT
  typeset -gr CPU_COUNT="$(nproc)"
  (( DEBUG ))  && echo "${CPU_COUNT}"
}
fi

export THISSCRIPTCOMPLETEPATH
typeset -gr THISSCRIPTCOMPLETEPATH="$(basename "$0")"   # ยง This goes in the FATHER-MOTHER script
export _err
typeset -i _err=0
export USER_HOME="$HOME"
export SUDO_USER="$USER"

load_struct_testing_wget(){
    local provider="$HOME/_/clis/execute_command_intuivo_cli/struct_testing"
    # shellcheck disable=SC1090
    [   -e "${provider}"  ] && source "${provider}" && echo "Loaded locally"
    [ ! -e "${provider}"  ] && eval """$(wget --quiet --no-check-certificate  https://raw.githubusercontent.com/zeusintuivo/execute_command_intuivo_cli/master/struct_testing -O -  2>/dev/null )"""   # suppress only wget download messages, but keep wget output for variable
    ( ( ! command -v passed >/dev/null 2>&1; ) && echo -e "\n \n  ERROR! Loading struct_testing \n \n " && exit 69; )
} # end load_struct_testing_wget
load_struct_testing_wget

enforce_variable_with_value USER_HOME "${USER_HOME}"
enforce_variable_with_value SUDO_USER "${SUDO_USER}"

enforce_variable_with_value THISSCRIPT "${THISSCRIPT}"
enforce_variable_with_value THISFOLDER "${THISFOLDER}"
enforce_variable_with_value THISSCRIPTCOMPLETEPATH "${THISSCRIPTCOMPLETEPATH}"
#
#
# - - -  struct_testing no sudo - - -  END
#
#

load_colors_script_name_and_break_trap() {

    GRAYEDOUT="\033[01;30m"
    RED="\033[01;31m"
    GREEN="\033[01;32m"
    YELLOW="\033[01;33m"
    DARKBLUE="\033[01;34m"
    PURPLE="\033[01;35m"
    CYAN="\033[01;36m"
    WHITEBOLD="\033[01;37m"
    CERO="\033[01;0m"

    # TRAP
    trap '{  \" KEYBOARD INTERRUPT.\"; exit 130; }' INT

    THISSCRIPTNAME=`basename "$0"`
} # end load_colors_script_name_and_break_trap

type_function_exists() {
  type "$1" > /dev/null 2>&1
} # type_function_exists


nvm_reload() {
    if [ -d $HOME/.nvm/ ]; then   #check for direc existance and attempt to load
    {
        # NVM
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
    }
    fi
} # nvm_reload


install_nvm_wget() {
    ( command -v wget >/dev/null 2>&1; ) &&  wget --no-check-certificate https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh  -O - | bash
} # end install_nvm_wget


install_nvm_curl() {
    ( command -v curl >/dev/null 2>&1; ) &&  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash
} # end install_nvm_curl


install_nvm_decide_between_curl() {

    if  is_installed wget ; then
    {
        install_nvm_wget
    }
    elif is_installed curl ; then
    {
        install_nvm_curl
    }
    fi
} # end install_nvm_decide_between_curl


check_wget_or_curl_are_installed() {
    if  is_not_installed wget ; then
    {
        sudo apt-get install wget -y
    }
    elif is_not_installed curl ; then
    {
        sudo apt-get install curl -y
    }
    fi

} # end check_wget_or_curl_are_installed


nvm_install() {
    if ! type_function_exists nvm; then
    {
        nvm_reload
        if ! type_function_exists nvm; then   #test again
        {
            printf "Installing NVM %s\n" >&2
            install_nvm_decide_between_curl
            wait
            # NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
        }
        fi
        nvm ls
    }
    fi
    wait

} # end nvm_install

source_nvm() {
    cd $HOME;
    ( [ -f  .bash_profile ] && [[ -z $(cat .bash_profile | egrep "nvm") ||  -z $(cat .bash_profile | egrep "NVM") ]]  && source .bash_profile ) \
     ||
    ( [ -f  .bashrc ] && [[ -z $(cat .bashrc | egrep "nvm") ||  -z $(cat .bashrc | egrep "NVM") ]]  && source .bashrc ) \
     ||
    ( [ -f  .profile ] && [[ -z $(cat .profile | egrep "nvm") ||  -z $(cat .profile | egrep "NVM") ]]  && source .profile ) \
     ||
    ( [ -f  .zshrc ] && [[ -z $(cat .zshrc | egrep "nvm") ||  -z $(cat .zshrc | egrep "NVM") ]]  && source .zshrc )

} # end source_nvm

node_install() {
    local node_version=""
    if [ ! -z "${1}" ] ;  then
        node_version="${1}"
    fi
    if [ ! -z "${node_version}" ] ;  then
    {
        if ! type_function_exists node; then
        {
            nvm install "${node_version}";
        }
        fi
        wait
    }
    else
    {
        echo "        # Installing Node! | Will skip if already exist"
        source_nvm
        if ! type_function_exists node; then
        {
            nvm install stable;
        }
        fi
        wait

    }
    fi


    export NODE_VERSION=$(node --version);
    echo "Node -v ${NODE_VERSION} Installation Complete";

} # end node_install


phantomjs_install() {

    local phantomjs_version=""
    if [ ! -z "${1}" ] ;  then
        phantomjs_version="${1}"
    fi
    if [ ! -z "${phantomjs_version}" ] ;  then
    {
        echo "        # Installing PhantomJS version ${phantomjs_version}. "
        source_nvm
        npm -g install phantomjs@"${phantomjs_version}"
        wait
    }
    else
    {
        phantomjs_version="LASTEST"
        echo "        # Installing ${phantomjs_version} PhantomJS ! |  phantomjs-prebuilt; phantomjs2;"
        source_nvm
        npm -g install phantomjs-prebuilt;
        wait
        npm -g install phantomjs2;
        wait
    }
    fi

    echo  "PhantomJS ${phantomjs_version} version install complete";
} # end phantomjs_install



install_phantom_js_using_npm() {

    local phantomjs_version=""
    if [[ ! -z "${1+x}"  ]] ; then  # check if a variable is set and not empty
        phantomjs_version="${1}"
    fi

    export NVM_DIR="/home/vagrant/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

    if [ ! -z "${phantomjs_version}" ] ;  then
    {
        echo "        # Installing PhantomJS version ${phantomjs_version}. "
        npm -g install phantomjs@"${phantomjs_version}"
        wait
    }
    else
    {
        phantomjs_version="LASTEST"
        echo "        # Installing ${phantomjs_version} PhantomJS |  phantomjs-prebuilt; phantomjs2;"

        npm -g install phantomjs-prebuilt;
        wait
        npm -g install phantomjs2;
        wait
    }
    fi

    echo  "PhantomJS ${phantomjs_version} version install complete";
} # end phantomjs_install

obtain_phantom_name_based_on_operating_system() {
    local phantomjs_version=""
    if [ ! -z "${1}" ] ;  then
        phantomjs_version="${1}"
    fi

    # check operation systems
    if [[ "$(uname)" == "Darwin" ]] ; then
      # Do something under Mac OS X platform
        [[ "$(uname -m)" == "x86_64" ]] && echo "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${phantomjs_version}-macosx.zip"
        [[ "$(uname -m)" == "i686"   ]] && echo "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${phantomjs_version}-macosx.zip"
    elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]] ; then
      # Do something under GNU/Linux platform
      # ubuntu lsb_release -i | sed 's/Distributor\ ID://g' = \tUbuntu\n
        [[ "$(uname -i)" == "x86_64" ]] && echo "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${phantomjs_version}-linux-x86_64.tar.bz2"
        [[ "$(uname -i)" == "i686"   ]] && echo "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${phantomjs_version}-linux-i686.tar.bz2"
    elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ; then
      # Do something under Windows NT platform
      echo "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-${phantomjs_version}-windows.zip"
      # nothing here
    fi
}

install_phantom_js_using_download() {
    local phantomjs_version=""
    if [ ! -z "${1}" ] ;  then
        phantomjs_version="${1}"
    fi

    if [[ -z "${NODE_VERSION}" ]] ;  then
        failed "I am missing NODE_VERSION var"
    fi

    CURRENT_NODE_HOME="${HOME}"/.nvm/versions/node/"${NODE_VERSION}"/

    if [[ "${CURRENT_NODE_HOME}" == "${HOME}/.nvm/versions/node//" ]] ;  then
        failed "I am missing CURRENT_NODE_HOME var"
    fi

    cd "${CURRENT_NODE_HOME}"lib/node_modules;


    if [  -z "${phantomjs_version}" ] ; then
    {
        # Get latest version
        PAGE=$(wget https://bitbucket.org/ariya/phantomjs/downloads/?tab=downloads -q -O -)
        phantomjs_version=$(echo $PAGE | sed -n 's/.*href="\([^"]*\).*/\1/p'  | grep phantomjs- | sed 's/[^0-9.]*\([0-9.]*\).*/\1/' | sort -rn | uniq | sed '/^\s*$/d' | head -1)

    }
    fi

    # Download  git repo using GIT -- DISABLED - its slower than unziping
        # Deprecated but insteresting to know how to CHECKOUT by TAG name. Leaving for Reference
        #    if [ ! -z "${phantomjs_version}" ] && type_function_exists "git" ;  then
        #    {
        #        echo "        # Installing PhantomJS version ${phantomjs_version}. "
        #        git clone https://github.com/ariya/phantomjs.git phantomjs
        #        cd phantomjs
        #        wait
        #        git checkout -b test remotes/origin/"${phantomjs_version}"  # How to do a โgit checkout -b <branchname>โ from a remote tag REF: https://stackoverflow.com/questions/7572647/how-to-do-a-git-checkout-b-branchname-from-a-remote-tag
        #        wait
        #        cd ..
        #        wait
        #    }
        #    el

    # Download  git repo using ZIP
        echo "        # Installing PhantomJS version ${phantomjs_version}  |"
        wget https://github.com/ariya/phantomjs/zipball/"${phantomjs_version}"
        wait
        unzip -o "${phantomjs_version}"
        wait
        [ -d phantomjs ] &&  rm -rf phantomjs
        mv *phantomjs* phantomjs;
        # clean up
        rm "${phantomjs_version}"

    # Download precompiled BINARY
        # expected: we are here "${CURRENT_NODE_HOME}"lib/node_modules/
        DONWLOAD_FILE_NAME=$(obtain_phantom_name_based_on_operating_system "${phantomjs_version}")
        # expected something like : phantomjs-2.1.1-linux-x86_64.tar.bz2
        # expected something like : phantomjs-2.1.1-macosx.zip

        wget "${DONWLOAD_FILE_NAME}"
        if (( ! $? == 0 )); then
        {
            failed "I could not download: ${DONWLOAD_FILE_NAME}"
        }
        fi
        wait
        if [[ "${DONWLOAD_FILE_NAME}" == *".zip" ]] ; then
        {
            unzip -o phantomjs-*
        }
        elif [[ "${DONWLOAD_FILE_NAME}" == *".bz2" ]] ; then
        {
            tar xvjf phantomjs-*
        }
        else
        {
            failed "I don't know how to unzip/untar this file: ${DONWLOAD_FILE_NAME}"
        }
        fi
        # expected: we are here "${CURRENT_NODE_HOME}"lib/node_modules/
        cp -rvf phantomjs-*/bin phantomjs/
        cp -rvf phantomjs-*/examples phantomjs/
        # clean up
        rm -rvf phantomjs-*

        cd "${CURRENT_NODE_HOME}"bin;
        [[ -L phantomjs ]] && unlink phantomjs
        ln -s "${CURRENT_NODE_HOME}"lib/node_modules/phantomjs/bin/phantomjs phantomjs;

    #    #### Deprecated Just getting master.
    #
    #        phantomjs_version="LASTEST"
    #        echo "        # Installing ${phantomjs_version} PhantomJS |  # Downloading PhantomJS! Latest Dev Version;"
    #        wget https://github.com/ariya/phantomjs/zipball/master;
    #        wait
    #        unzip -o master;
    #        wait
    #        mv *phantomjs* phantomjs;   # RENAME
    #        # clean up
    #        rm master
    #
    #        # build binary phantom manually REF: http://phantomjs.org/build.html
    #        cd phantomjs
    #        sudo apt-get install -y build-essential g++ flex bison gperf ruby perl \
    #          libsqlite3-dev libfontconfig1-dev libicu-dev libfreetype6 libssl-dev \
    #          libpng-dev libjpeg-dev python libx11-dev libxext-dev
    #
    #        python build.py
    #        build.sh
    #
    #
    #
    #        cd "${CURRENT_NODE_HOME}"bin;
    #        [[ -L phantomjs ]] && unlink phantomjs
    #        ln -s "${CURRENT_NODE_HOME}"lib/node_modules/phantomjs/bin/phantomjs phantomjs;



    echo 'PhantomJS Installation Complete';

} # end casper_install

casper_install() {
    local casper_version=""
    if [ ! -z "${1}" ] ;  then
        casper_version="${1}"
    fi

    if [[ -z "${NODE_VERSION}" ]] ;  then
        failed "I am missing NODE_VERSION var"
    fi

    CURRENT_NODE_HOME="${HOME}"/.nvm/versions/node/"${NODE_VERSION}"/

    if [[ "${CURRENT_NODE_HOME}" == "${HOME}/.nvm/versions/node//" ]] ;  then
        failed "I am missing CURRENT_NODE_HOME var"
    fi

    cd "${CURRENT_NODE_HOME}"lib/node_modules;

    if [ ! -z "${casper_version}" ] ;  then
    {
        echo "        # Installing CasperJS version ${casper_version}. "
        git clone https://github.com/casperjs/casperjs.git casperjs
        cd casperjs
        wait
        git checkout -b test remotes/origin/"${casper_version}"  # How to do a โgit checkout -b <branchname>โ from a remote tag REF: https://stackoverflow.com/questions/7572647/how-to-do-a-git-checkout-b-branchname-from-a-remote-tag
        wait
        cd ..
        wait
    }
    else
    {
        casper_version="LASTEST"
        echo "        # Installing ${casper_version} CasperJS |  # Downloading CasperJS. Latest Dev Version;"
        wget https://github.com/n1k0/casperjs/zipball/master;
        wait
        unzip -o master;
        wait
        mv *casperjs* casperjs;   # RENAME
        # clean up
        rm master

    }
    fi

    cd "${CURRENT_NODE_HOME}"bin;
    [[ -L casperjs ]] && unlink casperjs
    ln -s "${CURRENT_NODE_HOME}"lib/node_modules/casperjs/bin/casperjs casperjs;
    source_nvm

    echo 'CasperJS Installation Complete';

} # end casper_install


verify_installations() {
    # Verify Installation - Prompt with Alert if Problems.
    local commands_tocheck="nvm npm node phantomjs casperjs"
    local missing_counter=0;
    local needed_command

    for needed_command in ${commands_tocheck}; do
    {
        if ! type_function_exists "${needed_command}"; then
        {
            printf "Command not found in PATH: %s\n" "${needed_command}" >&2
            ((missing_counter++))
        }
        fi
    }
    done

    if ((missing_counter > 0)); then
    {
        for needed_command in $commands_tocheck; do
        {
            verify_is_installed "${needed_command}"
        }
        done

        printf "There was something wrong with the installation." >&2
        exit 1
    }
    fi

    # Alert of Installation Completition.


    echo >&2 "Install process ended. "

} # end verify_installations


display_help() {
    echo -e "

${CERO} ${THISSCRIPTNAME} Installs nvm, npm, phantomjs and caspterjs

    Usage

        ${THISSCRIPTNAME}  [phantomjs_version]  [nodejs_version]  [casperjs_version]     ---> all optional


         ${THISSCRIPTNAME}  1.9.8                     ---> will install nvm, node version stable, and phantomjs version 1.9.8, and caspterjs version master(dev)

         ${THISSCRIPTNAME}                            ---> will install nvm, node version stable, and phantomjs lastest      , and caspterjs version master(dev)

         ${THISSCRIPTNAME}  1.9.8    7.7.2    1.1.4   ---> will install nvm, node version v7.7.2, and phantomjs version 1.9.8, and caspterjs version 1.1.4
    "

} # end display_help



#                                              #
#                                              #
###                MAIN START               ####
#                                              #
#                                              #


                                       ##     ##    ###    #### ##    ##
                                       ###   ###   ## ##    ##  ###   ##
                                       #### ####  ##   ##   ##  ####  ##
                                       ## ### ## ##     ##  ##  ## ## ##
                                       ##     ## #########  ##  ##  ####
                                       ##     ## ##     ##  ##  ##   ###
                                       ##     ## ##     ## #### ##    ##

_ubuntu__64() {
  # REF: https://phantomjs.org/build.html
  sudo apt-get install build-essential g++ flex bison gperf ruby perl \
    libsqlite3-dev libfontconfig1-dev libicu-dev libfreetype6 libssl-dev \
    libpng-dev libjpeg-dev python libx11-dev libxext-dev -y

  phantomjs_version="1.9.8"
  test_phantomjs_version=""
  if [ ! -z "${1}" ] ;  then
    phantomjs_version="${1}"
    test_phantomjs_version="${1}"
  fi

  node_version="stable"
  test_node_version=""
  if [ ! -z "${2}" ] ;  then
    node_version="${2}"
    test_node_version="${2}"
  fi

  casper_version="1.1.4"
  casper_version=""
  test_casper_version=""
  if [ ! -z "${3}" ] ;  then
    casper_version="${3}"
    test_casper_version="${3}"
  fi


  load_colors_script_name_and_break_trap
  display_help

  check_wget_or_curl_are_installed

  nvm_install
  node_install "${node_version}"
  #phantomjs_install "${phantomjs_version}"
  install_phantom_js_using_download "${phantomjs_version}"
  casper_install "${casper_version}"

  verify_installations

  [[ ! -z "${test_node_version}" ]] && verify_installed_version "node --version"  "${test_node_version}"
  [[ ! -z "${test_phantomjs_version}" ]] && verify_installed_version "phantomjs --version"  "${test_phantomjs_version}"
  [[ ! -z "${test_casper_version}" ]] && verify_installed_version "casperjs --version"  "${test_casper_version}"
} # end

_fedora__64() {
  sudo dnf install gcc gcc-c++ make flex bison gperf ruby \
    openssl-devel freetype-devel fontconfig-devel libicu-devel sqlite-devel \
      libpng-devel libjpeg-devel -y

} # end

_main() {
  determine_os_and_fire_action
} # end _main

_main

echo ":)"
